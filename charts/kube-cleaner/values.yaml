# Default values for kube-cleaner.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/superwise-ai/kube-cleaner
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# -- Environment variables to inject
env:
  - name: KUBE_CLEANER_TIMER_INTERVAL
    value: "300"

# -- Additional command line arguments to pass
extraArgs: []

# -- Namespace to watch. If not provided, the controller will watch all namespaces.
watchNamespace: ""

# -- Create cleanup policies using the chart
cleanupPolicies:
  {}
  # The cleanupPolicies parameter supports definition of policies using multiple objects.
  # This allowed the usage of multiple values files without overriding the values.
  # For each object (example1, example2), an array of policies can be provided.
  # Each policy in the array requires the `type`, `name` and `rules` fields.
  # The `namespace` field is only required when `type` is `namespaced` and defaults to the release namespace.
  # example1:
  #   - type: cluster
  #     name: test-cluster
  #     rules:
  #       pods:
  #         - succeeded: 1h
  #           failed: 1h
  #         - failed: 5m
  #           labelSelector:
  #             foo: bar
  #   - type: namespaced
  #     namespace: default
  #     name: test-namespaced
  #     rules:
  #       pods:
  #         - succeeded: 1h
  #           failed: 1h
  #         - failed: 5m
  #           labelSelector:
  #             foo: bar
  # example2:
  #   - type: namespaced
  #     name: test-namespaced-2
  #     rules:
  #       pods:
  #         - succeeded: 1h
  #           failed: 1h
  #         - failed: 5m
  #           labelSelector:
  #             foo: bar
